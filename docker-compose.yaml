services:
  # Backend service for Python
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PORT=5000
      - RABBITMQ_USERNAME=username
      - RABBITMQ_PASSWORD=password
      # change it to a public domain when bought, and add in credentials.json file and update google OAuth Credentials
      - FRONTEND_SERVICE=localhost:3000 
    ports:
      - "5000:5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service for React
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app # I have done volume mapping here, hence the frontend build gets affected in realTime
    environment:
    # change it to a public domain when bought, and add in credentials.json file and update google OAuth credentials
      - REACT_APP_BACKEND_SERVICE=localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    networks:
      - my-network

  # RabbitMQ service for the worker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=username
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Service for the worker.py script (Async)
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - ./worker:/app
      - ./shared:/app/shared
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=username
      - RABBITMQ_PASSWORD=password
      - WORKER_CONCURRENCY=4  # Number of concurrent tasks
      - WORKER_TIMEOUT=300    # Task timeout in seconds
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - my-network
    mem_limit: 1G
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; print('Worker healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Scale worker instances for high load
  # Uncomment and adjust as needed
  # worker-2:
  #   build:
  #     context: .
  #     dockerfile: worker/Dockerfile
  #   volumes:
  #     - ./worker:/app
  #     - ./shared:/app/shared
  #   environment:
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_USERNAME=username
  #     - RABBITMQ_PASSWORD=password
  #     - WORKER_CONCURRENCY=4
  #     - WORKER_TIMEOUT=300
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   restart: always
  #   networks:
  #     - my-network

networks:
  my-network:
    driver: bridge

volumes:
  rabbitmq_data: