name: Auto Release

on:
  pull_request:
    branches:
      - release
    types: [closed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'release'
        type: choice
        options:
          - release

# Allow the workflow to bypass branch protection rules
permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run on PR merge (removed push condition since we removed push trigger)
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install auto
        run: npm install -g auto

      - name: Install git-tag plugin
        run: npm install -g @auto-it/git-tag

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get the current version from setup.py
          CURRENT_VERSION=$(grep 'version=' shared/setup.py | sed "s/.*version=\"\(.*\)\".*/\1/")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the bump type from auto
          BUMP_TYPE=$(auto version)
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate next version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case "$BUMP_TYPE" in
            "patch")
              PATCH=$((10#$PATCH + 1))
              ;;
            "minor")
              MINOR=$((10#$MINOR + 1))
              PATCH="0"
              ;;
            "major")
              MAJOR=$((10#$MAJOR + 1))
              MINOR="0"
              PATCH="0"
              ;;
          esac
          
          NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Generate changelog
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Generate a simple changelog based on recent commits
          CHANGELOG=$(git log --oneline --since="1 week ago" | head -10 | sed 's/^/- /')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in setup.py
        run: |
          # Update version in setup.py (remove the 'v' prefix)
          VERSION_WITHOUT_V="${NEXT_VERSION#v}"
          echo "Updating setup.py from current version to: $VERSION_WITHOUT_V"
          
          # Debug: show current content
          echo "Current setup.py version line:"
          grep 'version=' shared/setup.py
          
          # Check if VERSION_WITHOUT_V is not empty
          if [ -z "$VERSION_WITHOUT_V" ]; then
            echo "ERROR: VERSION_WITHOUT_V is empty!"
            exit 1
          fi
          
          # Update the version
          sed -i "s/version=\"[^\"]*\"/version=\"$VERSION_WITHOUT_V\"/" shared/setup.py
          
          # Verify the update
          echo "Updated setup.py version line:"
          grep 'version=' shared/setup.py
          
          echo "Updated setup.py to version $VERSION_WITHOUT_V"

      - name: Create version commit with [skip ci]
        run: |
          git add shared/setup.py
          git commit -m "Bump version to ${{ steps.version.outputs.next_version }} [skip ci]"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.next_version }}
          release_name: Release ${{ steps.version.outputs.next_version }}
          body: |
            ## Auto Release ${{ steps.version.outputs.next_version }}
            
            This release was created automatically by the auto-release workflow.
            
            ### Changes
            - Version bump to ${{ steps.version.outputs.next_version }}
            - Auto-generated release notes
            
            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            *This release was created automatically.*
          draft: false
          prerelease: false

      - name: Push version bump to release branch
        run: |
          # Push the version bump commit directly to release branch
          # This commit has [skip ci] so it won't trigger another workflow run
          # Repository admin role in bypass list allows this push
          git push origin HEAD:release 