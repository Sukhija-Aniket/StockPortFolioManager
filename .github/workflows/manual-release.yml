name: Manual Release

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch to release from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - mqueue
          - upgrade
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install auto
        run: npm install -g auto

      - name: Install git-tag plugin
        run: npm install -g @auto-it/git-tag

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch from source
        run: |
          git checkout -b manual-release-${{ github.run_id }}
          git reset --hard origin/${{ github.event.inputs.source_branch }}

      - name: Ensure clean working directory
        run: |
          git status
          if [ -n "$(git status --porcelain)" ]; then
            echo "Working directory is not clean. Committing remaining changes..."
            git add .
            git commit -m "Auto-commit remaining changes before release" || true
          fi

      - name: Calculate next version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get the current version from setup.py
          CURRENT_VERSION=$(grep 'version=' shared/setup.py | sed "s/.*version=\"\(.*\)\".*/\1/")
          echo "Current version: $CURRENT_VERSION"
          
          # Validate current version is not empty
          if [ -z "$CURRENT_VERSION" ]; then
            echo "ERROR: Current version is empty!"
            exit 1
          fi
          
          # Calculate next version based on bump type
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          echo "Bump type: '$BUMP_TYPE'"
          
          # Validate bump type
          if [ -z "$BUMP_TYPE" ]; then
            echo "ERROR: BUMP_TYPE is empty!"
            exit 1
          fi
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          echo "Version parts - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          
          case "$BUMP_TYPE" in
            "patch")
              PATCH=$((10#$PATCH + 1))
              ;;
            "minor")
              MINOR=$((10#$MINOR + 1))
              PATCH="0"
              ;;
            "major")
              MAJOR=$((10#$MAJOR + 1))
              MINOR="0"
              PATCH="0"
              ;;
            *)
              echo "ERROR: Unknown bump type: '$BUMP_TYPE'"
              exit 1
              ;;
          esac
          
          NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Calculated next version: '$NEXT_VERSION'"
          
          # Validate next version
          if [ -z "$NEXT_VERSION" ]; then
            echo "ERROR: NEXT_VERSION is empty after calculation!"
            exit 1
          fi
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Generate changelog
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Generate a proper changelog based on recent commits
          CHANGELOG=$(git log --oneline --since="1 week ago" | head -15 | sed 's/^/- /')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in setup.py
        run: |
          # Get the next version from the previous step
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          echo "Next version from previous step: '$NEXT_VERSION'"
          
          # Update version in setup.py (remove the 'v' prefix)
          VERSION_WITHOUT_V="${NEXT_VERSION#v}"
          echo "Updating setup.py from current version to: $VERSION_WITHOUT_V"
          
          # Debug: show current content
          echo "Current setup.py version line:"
          grep 'version=' shared/setup.py
          
          # Check if VERSION_WITHOUT_V is not empty
          if [ -z "$VERSION_WITHOUT_V" ]; then
            echo "ERROR: VERSION_WITHOUT_V is empty!"
            exit 1
          fi
          
          # Update the version
          sed -i "s/version=\"[^\"]*\"/version=\"$VERSION_WITHOUT_V\"/" shared/setup.py
          
          # Verify the update
          echo "Updated setup.py version line:"
          grep 'version=' shared/setup.py
          
          echo "Updated setup.py to version $VERSION_WITHOUT_V"

      - name: Update CHANGELOG.md
        run: |
          # Get the next version and changelog
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          VERSION_WITHOUT_V="${NEXT_VERSION#v}"
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          
          # Create or update CHANGELOG.md
          if [ ! -f "CHANGELOG.md" ]; then
            # Create new CHANGELOG.md
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [Unreleased]" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [$VERSION_WITHOUT_V] - $(date +%Y-%m-%d)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Added" >> CHANGELOG.md
            echo "- Initial release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Changed" >> CHANGELOG.md
            echo "- N/A" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Deprecated" >> CHANGELOG.md
            echo "- N/A" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Removed" >> CHANGELOG.md
            echo "- N/A" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Fixed" >> CHANGELOG.md
            echo "- N/A" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Security" >> CHANGELOG.md
            echo "- N/A" >> CHANGELOG.md
          else
            # Update existing CHANGELOG.md
            # Create temporary file with new version entry
            echo "# Changelog" > temp_changelog.md
            echo "" >> temp_changelog.md
            echo "All notable changes to this project will be documented in this file." >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> temp_changelog.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "## [Unreleased]" >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "## [$VERSION_WITHOUT_V] - $(date +%Y-%m-%d)" >> temp_changelog.md
            echo "" >> temp_changelog.md
            echo "### Changes" >> temp_changelog.md
            echo "$CHANGELOG" >> temp_changelog.md
            echo "" >> temp_changelog.md
            
            # Append the rest of the existing changelog (skip the header and unreleased section)
            tail -n +$(($(grep -n "## \[Unreleased\]" CHANGELOG.md | cut -d: -f1) + 1)) CHANGELOG.md >> temp_changelog.md
            
            # Replace the original file
            mv temp_changelog.md CHANGELOG.md
          fi
          
          echo "Updated CHANGELOG.md for version $VERSION_WITHOUT_V"

      - name: Create version commit
        run: |
          git add shared/setup.py CHANGELOG.md
          git commit -m "Bump version to ${{ steps.version.outputs.next_version }} [skip ci]"

      - name: Push release branch
        run: |
          git push origin manual-release-${{ github.run_id }}

      - name: Create Pull Request to release branch
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          base: release
          branch: manual-release-${{ github.run_id }}
          title: "Manual Release ${{ steps.version.outputs.next_version }}"
          body: |
            ## Manual Release ${{ steps.version.outputs.next_version }}
            
            This is a manual release PR that will trigger the auto release workflow when merged.
            
            **Source Branch:** ${{ github.event.inputs.source_branch }}
            **Version Bump:** ${{ github.event.inputs.version_bump }}
            
            ${{ github.event.inputs.release_notes }}
            
            ### Changes
            - Version bump to ${{ steps.version.outputs.next_version }}
            - Auto-generated release notes
            
            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            *This PR was created automatically by the manual release workflow.*
            *When merged, it will trigger the auto release workflow to create the GitHub release.*
          delete-branch: true
          commit-message: "Manual Release ${{ steps.version.outputs.next_version }}"
          title-prefix: "Manual Release: "

      - name: Wait for PR to be created
        run: |
          echo "Waiting for PR to be created..."
          sleep 10

      - name: Create GitHub Release (if PR creation failed)
        if: failure()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.next_version }}
          release_name: Release ${{ steps.version.outputs.next_version }}
          body: |
            ## Manual Release ${{ steps.version.outputs.next_version }}
            
            **Source Branch:** ${{ github.event.inputs.source_branch }}
            **Version Bump:** ${{ github.event.inputs.version_bump }}
            
            ${{ github.event.inputs.release_notes }}
            
            ### Changes
            - Version bump to ${{ steps.version.outputs.next_version }}
            - Auto-generated release notes
            
            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            *This release was created manually (PR creation failed).*
          draft: false
          prerelease: false 