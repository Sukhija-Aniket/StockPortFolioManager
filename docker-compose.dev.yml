services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=stock_portfolio
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Backend service for Python (Development)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stock_portfolio
      - RABBITMQ_HOST=rabbitmq
      - PORT=5000
      - RABBITMQ_USERNAME=username
      - RABBITMQ_PASSWORD=password
      - FRONTEND_SERVICE=localhost:3000 
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service for React
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
    environment:
      - REACT_APP_BACKEND_SERVICE=localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    networks:
      - my-network

  # RabbitMQ service for the worker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_DEFAULT_USER=username
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Service for the worker.py script (Development)
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile.dev
    volumes:
      - ./worker:/app
      - ./shared:/app/shared
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stock_portfolio
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=username
      - RABBITMQ_PASSWORD=password
      - WORKER_CONCURRENCY=4
      - WORKER_TIMEOUT=300
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_RECYCLE=3600
      - MAX_RETRIES=3
      - RETRY_DELAY=60
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - my-network
    mem_limit: 1G
    mem_reservation: 512M
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; print('Worker healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  my-network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data: 